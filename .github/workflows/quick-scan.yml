name: Quick Security Scan

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to scan (must be your own website)'
        required: true
        type: string
      scan_type:
        description: 'What to scan for'
        required: true
        type: choice
        options:
          - all
          - xss-only
          - sql-injection-only
          - headers-only

jobs:
  quick-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 lxml
        
    - name: Create quick scanner
      run: |
        cat > quick_scanner.py << 'EOF'
        #!/usr/bin/env python3
        import requests
        from bs4 import BeautifulSoup
        import json
        from datetime import datetime
        
        def quick_scan(url, scan_type):
            print(f"Starting {scan_type} scan of: {url}")
            
            try:
                response = requests.get(url, timeout=30)
                vulnerabilities = []
                
                if scan_type in ['all', 'headers-only']:
                    # Check security headers
                    headers = response.headers
                    security_headers = {
                        'X-Frame-Options': 'Missing X-Frame-Options (clickjacking risk)',
                        'X-Content-Type-Options': 'Missing X-Content-Type-Options (MIME sniffing risk)',
                        'X-XSS-Protection': 'Missing X-XSS-Protection',
                        'Strict-Transport-Security': 'Missing HSTS (HTTPS enforcement)',
                        'Content-Security-Policy': 'Missing CSP (XSS protection)'
                    }
                    
                    for header, description in security_headers.items():
                        if header not in headers:
                            vulnerabilities.append({
                                'type': 'Missing Security Header',
                                'header': header,
                                'risk_level': 'Low',
                                'description': description,
                                'mitigation': f'Implement {header} header'
                            })
                
                if scan_type in ['all', 'xss-only']:
                    # Basic XSS check
                    soup = BeautifulSoup(response.text, 'html.parser')
                    forms = soup.find_all('form')
                    
                    for form in forms:
                        inputs = form.find_all(['input', 'textarea'])
                        if inputs:
                            vulnerabilities.append({
                                'type': 'Form Input Found',
                                'risk_level': 'Info',
                                'description': f'Found form with {len(inputs)} input fields',
                                'mitigation': 'Test these inputs for XSS vulnerabilities'
                            })
                
                if scan_type in ['all', 'sql-injection-only']:
                    # Check for common SQL injection patterns
                    if any(pattern in response.text.lower() for pattern in ['sql syntax', 'mysql_fetch', 'oracle error']):
                        vulnerabilities.append({
                            'type': 'Potential SQL Error Exposure',
                            'risk_level': 'Medium',
                            'description': 'SQL error messages found in response',
                            'mitigation': 'Hide SQL errors from users'
                        })
                
                # Generate report
                report = {
                    'scan_info': {
                        'target_url': url,
                        'scan_type': scan_type,
                        'scan_date': datetime.now().isoformat(),
                        'total_vulnerabilities': len(vulnerabilities)
                    },
                    'vulnerabilities': vulnerabilities
                }
                
                # Save report
                with open('quick_scan_report.json', 'w') as f:
                    json.dump(report, f, indent=2)
                
                print(f"Scan completed. Found {len(vulnerabilities)} issues.")
                return report
                
            except Exception as e:
                print(f"Error during scan: {e}")
                return None
        
        if __name__ == "__main__":
            import sys
            if len(sys.argv) < 3:
                print("Usage: python quick_scanner.py <url> <scan_type>")
                sys.exit(1)
            
            url = sys.argv[1]
            scan_type = sys.argv[2]
            quick_scan(url, scan_type)
        EOF
        
    - name: Run quick scan
      run: |
        python quick_scanner.py "${{ inputs.target_url }}" "${{ inputs.scan_type }}"
        
    - name: Upload results
      uses: actions/upload-artifact@v3
      with:
        name: quick-scan-results
        path: quick_scan_report.json
        retention-days: 7
        
    - name: Display results
      run: |
        if [ -f "quick_scan_report.json" ]; then
          echo "## Quick Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ inputs.target_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Type:** ${{ inputs.scan_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse and display results
          python -c "
        import json
        with open('quick_scan_report.json', 'r') as f:
            data = json.load(f)
        
        print(f'**Total Issues Found:** {data[\"scan_info\"][\"total_vulnerabilities\"]}')
        print()
        
        if data['vulnerabilities']:
            print('### Issues Found:')
            for i, vuln in enumerate(data['vulnerabilities'], 1):
                print(f'{i}. **{vuln[\"type\"]}** ({vuln[\"risk_level\"]})')
                print(f'   - {vuln[\"description\"]}')
                print(f'   - Mitigation: {vuln[\"mitigation\"]}')
                print()
        else:
            print('âœ… No security issues detected in this quick scan.')
        " >> $GITHUB_STEP_SUMMARY
        fi
