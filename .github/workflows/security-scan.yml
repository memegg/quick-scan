name: Web Security Scanner

on:
  workflow_dispatch:
    inputs:
      target_url:
        description: 'Target URL to scan (must be your own website)'
        required: true
        type: string
      username:
        description: 'Username for authentication (optional)'
        required: false
        type: string
      password:
        description: 'Password for authentication (optional)'
        required: false
        type: string
        default: ''
      scanner_type:
        description: 'Type of scanner to use'
        required: true
        type: choice
        options:
          - basic
          - advanced
      config_file:
        description: 'Configuration file path (for advanced scanner)'
        required: false
        type: string
        default: 'config.yaml'
  
  # Allow manual trigger with custom inputs
  repository_dispatch:
    types: [security-scan]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyyaml
        
    - name: Test scanner setup
      run: |
        echo "Testing scanner setup..."
        echo "Python version: $(python --version)"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        echo "Testing basic imports..."
        python -c "
        try:
            import requests
            print('✅ requests imported')
        except Exception as e:
            print(f'❌ requests import failed: {e}')
            
        try:
            from bs4 import BeautifulSoup
            print('✅ BeautifulSoup imported')
        except Exception as e:
            print(f'❌ BeautifulSoup import failed: {e}')
            
        try:
            import yaml
            print('✅ yaml imported')
        except Exception as e:
            print(f'❌ yaml import failed: {e}')
        "
        
        echo "Testing scanner imports..."
        python -c "
        try:
            from web_security_scanner import WebSecurityScanner
            print('✅ WebSecurityScanner imported')
        except Exception as e:
            print(f'❌ WebSecurityScanner import failed: {e}')
            
        try:
            from advanced_scanner import AdvancedSecurityScanner
            print('✅ AdvancedSecurityScanner imported')
        except Exception as e:
            print(f'❌ AdvancedSecurityScanner import failed: {e}')
        "
        
    - name: Create config file
      run: |
        if [ ! -f "config.yaml" ]; then
          echo "Creating default config.yaml..."
          cat > config.yaml << 'EOF'
        scanner:
          max_threads: 3
          request_delay: 2.0
          timeout: 30
        payloads:
          xss:
            - '<script>alert("XSS")</script>'
            - '"><script>alert("XSS")</script>'
          sql_injection:
            - "' OR '1'='1"
            - "' OR 1=1--"
        EOF
        fi
        
        echo "Config file contents:"
        cat config.yaml
        
    - name: Test scanner dry run
      run: |
        echo "Testing scanner dry run..."
        
        # Test basic scanner creation and basic methods
        python -c "
        try:
            from web_security_scanner import WebSecurityScanner
            scanner = WebSecurityScanner('https://example.com')
            print('✅ Basic scanner created successfully')
            
            # Test basic methods without running full scan
            print('Testing basic methods...')
            scanner.logger.info('Test log message')
            print('✅ Logger working')
            
        except Exception as e:
            print(f'❌ Basic scanner test failed: {e}')
            import traceback
            traceback.print_exc()
        "
        
        # Test advanced scanner creation
        python -c "
        try:
            from advanced_scanner import AdvancedSecurityScanner
            scanner = AdvancedSecurityScanner('https://example.com')
            print('✅ Advanced scanner created successfully')
            
        except Exception as e:
            print(f'❌ Advanced scanner test failed: {e}')
            import traceback
            traceback.print_exc()
        "
        
    - name: Run Basic Security Scanner
      if: inputs.scanner_type == 'basic'
      continue-on-error: true
      run: |
        echo "Starting Basic Security Scanner..."
        echo "Target URL: ${{ inputs.target_url }}"
        echo "Username: ${{ inputs.username || 'None' }}"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        echo "Running basic scanner..."
        echo "Command to run:"
        if [ -n "${{ inputs.username }}" ] && [ -n "${{ inputs.password }}" ]; then
          echo "python web_security_scanner.py \"${{ inputs.target_url }}\" --username \"${{ inputs.username }}\" --password \"${{ inputs.password }}\" --non-interactive"
          timeout 300 python web_security_scanner.py "${{ inputs.target_url }}" --username "${{ inputs.username }}" --password "${{ inputs.password }}" --non-interactive 2>&1 || {
            echo "Scanner failed with exit code: $?"
            echo "Creating fallback report..."
            echo '{"status": "scanner_failed", "message": "Basic scanner failed to complete", "target_url": "${{ inputs.target_url }}"}' > basic_scanner_fallback.json
          }
        else
          echo "python web_security_scanner.py \"${{ inputs.target_url }}\" --non-interactive"
          timeout 300 python web_security_scanner.py "${{ inputs.target_url }}" --non-interactive 2>&1 || {
            echo "Scanner failed with exit code: $?"
            echo "Creating fallback report..."
            echo '{"status": "scanner_failed", "message": "Basic scanner failed to complete", "target_url": "${{ inputs.target_url }}"}' > basic_scanner_fallback.json
          }
        fi
        
        echo "Basic scanner step completed"
        
    - name: Run Advanced Security Scanner
      if: inputs.scanner_type == 'advanced'
      continue-on-error: true
      run: |
        echo "Starting Advanced Security Scanner..."
        echo "Target URL: ${{ inputs.target_url }}"
        echo "Username: ${{ inputs.username || 'None' }}"
        echo "Config file: ${{ inputs.config_file }}"
        echo "Current directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        
        echo "Running advanced scanner..."
        echo "Command to run:"
        if [ -n "${{ inputs.username }}" ] && [ -n "${{ inputs.password }}" ]; then
          echo "python advanced_scanner.py \"${{ inputs.target_url }}\" --username \"${{ inputs.username }}\" --password \"${{ inputs.password }}\" --config \"${{ inputs.config_file }}\" --non-interactive"
          timeout 300 python advanced_scanner.py "${{ inputs.target_url }}" --username "${{ inputs.username }}" --password "${{ inputs.password }}" --config "${{ inputs.config_file }}" --non-interactive 2>&1 || {
            echo "Scanner failed with exit code: $?"
            echo "Creating fallback report..."
            echo '{"status": "scanner_failed", "message": "Advanced scanner failed to complete", "target_url": "${{ inputs.target_url }}"}' > advanced_scanner_fallback.json
          }
        else
          echo "python advanced_scanner.py \"${{ inputs.target_url }}\" --config \"${{ inputs.config_file }}\" --non-interactive"
          timeout 300 python advanced_scanner.py "${{ inputs.target_url }}" --config "${{ inputs.config_file }}" --non-interactive 2>&1 || {
            echo "Scanner failed with exit code: $?"
            echo "Creating fallback report..."
            echo '{"status": "scanner_failed", "message": "Advanced scanner failed to complete", "target_url": "${{ inputs.target_url }}"}' > advanced_scanner_fallback.json
          }
        fi
        
        echo "Advanced scanner step completed"
        
    - name: Check generated files
      run: |
        echo "Checking for generated files..."
        echo "Files in current directory:"
        ls -la
        
        echo "Looking for report files:"
        find . -name "*.json" -o -name "*.html" -o -name "*.csv" -o -name "*.log" | head -20
        
        # Create a dummy report if none exists (to prevent workflow failure)
        if ! find . -name "*.json" -o -name "*.html" -o -name "*.csv" -o -name "*.log" | grep -q .; then
          echo "No reports found, creating dummy report..."
          echo '{"status": "no_reports_generated", "message": "Scanner completed but no reports were generated"}' > dummy_report.json
        fi
        
    - name: Upload scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          *.json
          *.html
          *.csv
          *.log
        retention-days: 30
        
    - name: Create summary
      run: |
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Target URL:** ${{ inputs.target_url }}" >> $GITHUB_STEP_SUMMARY
        echo "**Scanner Type:** ${{ inputs.scanner_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Generated Reports:" >> $GITHUB_STEP_SUMMARY
        
        # List generated files
        for file in *.json *.html *.csv *.log; do
          if [ -f "$file" ]; then
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Note:** Download the artifacts above to view detailed scan results." >> $GITHUB_STEP_SUMMARY
